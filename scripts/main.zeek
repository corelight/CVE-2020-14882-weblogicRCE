module CVE_2020_14882_Weblogic;
# This script raises notices relating to Oracle WebLogic Server RCE CVE-2020-14882 and CVE-2020-14750
# CVE-2020-14882  https://www.oracle.com/security-alerts/cpuoct2020traditional.html
# CVE-2020-14750  https://www.oracle.com/security-alerts/alert-cve-2020-14750.html
# Tested on zeek version 3.3.0-dev.329
# Author: Ben Reardon, Corelight Labs . ben.reardon@corelight.com, @benreardon
# Version: 0.1

export {
    redef enum Notice::Type += {
        Exploit_attempt_detected_GET,
        Exploit_attempt_potentially_succeeded_GET,
        Exploit_attempt_detected_POST,
        Exploit_attempt_potentially_succeeded_POST
    };
    const default_port: port = 7001/tcp;
    const detect_default_port_only: bool = F;
    const detect_unsuccessful_attempts: bool = T;
    const include_exploited_server_response_in_notice: bool = F;
    const suppress_for = 60sec;
    redef record HTTP::Info += {
        CVE_2020_14882_Weblogic_detected: bool &default = F;
        CVE_2020_14882_Weblogic_POST_request_data: string &optional &default = "";
        CVE_2020_14882_Weblogic_response_data: string &optional &default = "";
        CVE_2020_14882_Weblogic_original_URI: string &optional &default = "";
        CVE_2020_14882_Weblogic_notice_post_sample_length: count &default = 500;
    };
    option interesting_regex = /%252e%252e%252fconsole\.portal/i | /%2e%2e%2fconsole\.portal/i;
}

# Collect the original_URI to include later in the notice.
event http_request(c: connection, method: string, original_URI: string, unescaped_URI: string, version: string)
    {
    if (detect_default_port_only && c$id$resp_p != default_port) { return; }
    if (!c$http?$method) { return; }
    if (!(c$http$method == "POST" || c$http$method == "GET")) { return; }
    if (c$id$orig_h in scanner_exclude_from_detection) { return; }
    if (interesting_regex in original_URI)
        {
        c$http$CVE_2020_14882_Weblogic_detected = T;
        c$http$CVE_2020_14882_Weblogic_original_URI = cat(original_URI);
        }
    }

# For POST requests, collect a sample of POST data to include later in the notice.
event http_entity_data(c: connection, is_orig: bool, length: count, data: string) 
    {
    if (!include_exploited_server_response_in_notice) { return; }
    if (detect_default_port_only && c$id$resp_p != default_port) { return; }
    if (!c$http?$method) { return; }
    if (!(c$http$method == "POST" || c$http$method == "GET")) { return; }
    if (c$id$orig_h in scanner_exclude_from_detection) { return; }
    if (interesting_regex in c$http$uri)
        {
        if (is_orig)
        {
            c$http$CVE_2020_14882_Weblogic_detected = T;
            c$http$CVE_2020_14882_Weblogic_POST_request_data = cat(sub_bytes(data,0,c$http$CVE_2020_14882_Weblogic_notice_post_sample_length),"...",sub_bytes(data,length-c$http$CVE_2020_14882_Weblogic_notice_post_sample_length,length));
        }
        if (!is_orig &&
            c$http$CVE_2020_14882_Weblogic_detected &&
            include_exploited_server_response_in_notice )
            {
            c$http$CVE_2020_14882_Weblogic_response_data = cat(sub_bytes(data,0,c$http$CVE_2020_14882_Weblogic_notice_post_sample_length),"...",sub_bytes(data,length-c$http$CVE_2020_14882_Weblogic_notice_post_sample_length,length));
            }
        }
    }

event http_reply (c: connection, version: string, code: count, reason: string)
    {
    if (detect_default_port_only && c$id$resp_p != default_port) { return; }
    if (!c$http?$method) { return; }
    if (!(c$http$method == "POST" || c$http$method == "GET")) { return; }
    if (c$id$orig_h in scanner_exclude_from_detection) { return; }
    if (!c$http$CVE_2020_14882_Weblogic_detected) { return ; }

    if (c$http$method == "POST")
        {
        if (code == 200 || reason == "OK" )
            {
            NOTICE([$note=Exploit_attempt_potentially_succeeded_POST,
                    $conn=c,
                    $identifier=cat(c$id$orig_h,c$id$resp_h,c$id$resp_p,"success"),
                    $msg="Potentially successful exploit of Oracle's WebLogic Server Remote Code Execution vulnerability (CVE-2020-14882 and CVE-2020-14750) using POST method. Refer to https://www.oracle.com/security-alerts/cpuoct2020traditional.html and https://www.oracle.com/security-alerts/alert-cve-2020-14750.html. See sub field for artifacts.",
                    $suppress_for=suppress_for,
                    $sub=fmt("The Server response code = [%s - %s]. The original URI = [%s]. A sample of the Client request POST = [%s]. A Sample of the Server response = [%s]",
                              code, reason, c$http$CVE_2020_14882_Weblogic_original_URI, c$http$CVE_2020_14882_Weblogic_POST_request_data, c$http$CVE_2020_14882_Weblogic_response_data)]);
            }
        else
            { 
            if (detect_unsuccessful_attempts)
                {
                NOTICE([$note=Exploit_attempt_detected_POST,
                        $conn=c,
                        $identifier=cat(c$id$orig_h,c$id$resp_h,c$id$resp_p,"unsuccessful"),
                        $msg="Unsuccessful exploit attempt of Oracle's WebLogic Server Remote Code Execution vulnerability (CVE-2020-14882 and CVE-2020-14750) using POST method. Refer to https://www.oracle.com/security-alerts/cpuoct2020traditional.html and https://www.oracle.com/security-alerts/alert-cve-2020-14750.html. See sub field for artifacts.",
                        $suppress_for=suppress_for,
                        $sub=fmt("The Server response code = [%s - %s]. The original URI = [%s]. A sample of the Client request POST = [%s]",
                                  code, reason, c$http$CVE_2020_14882_Weblogic_original_URI, c$http$CVE_2020_14882_Weblogic_POST_request_data)]);
                }
            }
        return;
        }

    if (c$http$method == "GET")
        {
        if (code == 200 || reason == "OK" )
            {
            NOTICE([$note=Exploit_attempt_potentially_succeeded_GET,
                    $conn=c,
                    $identifier=cat(c$id$orig_h,c$id$resp_h,c$id$resp_p,"success"),
                    $msg="Potentially successful exploit of Oracle's WebLogic Server Remote Code Execution vulnerability (CVE-2020-14882 and CVE-2020-14750) using GET method. Refer to https://www.oracle.com/security-alerts/cpuoct2020traditional.html and https://www.oracle.com/security-alerts/alert-cve-2020-14750.html. See sub field for artifacts.",
                    $suppress_for=suppress_for,
                    $sub=fmt("The Server response code = [%s - %s]. The original URI = [%s]. A Sample of the Server response = [%s]",
                              code, reason, c$http$CVE_2020_14882_Weblogic_original_URI, c$http$CVE_2020_14882_Weblogic_response_data)]);
            }
        else
            {
            if (detect_unsuccessful_attempts)
                {
                NOTICE([$note=Exploit_attempt_detected_GET,
                        $conn=c,
                        $identifier=cat(c$id$orig_h,c$id$resp_h,c$id$resp_p,"unsuccessful"),
                        $msg="Unsuccessful exploit attempt of Oracle's WebLogic Server Remote Code Execution vulnerability (CVE-2020-14882 and CVE-2020-14750) using GET method. Refer to https://www.oracle.com/security-alerts/cpuoct2020traditional.html and https://www.oracle.com/security-alerts/alert-cve-2020-14750.html. See sub field for artifacts.",
                        $suppress_for=suppress_for,
                        $sub=fmt("The Server response code = [%s - %s]. The original URI = [%s]",
                                  code, reason, c$http$CVE_2020_14882_Weblogic_original_URI)]);
                }
            }
        }
    }
